reduce.df <- function(df,
                      institution.source = "institutionCode",
                      collection.code = "collectionCode",
                      catalog.number = "catalogNumber",
                      year.event = "year",
                      date.identified = "dateIdentified",
                      scientific.name = "species",
                      determined.by = "identifiedBy",
                      longitude = "decimalLongitude",
                      latitude = "decimalLatitude",
                      basis.of.rec = "basisOfRecord",
                      media.type = "mediaType",
                      occ.id = "occurrenceID",
                      na.rm.coords = TRUE){

  institution.source <- as.character(df[,institution.source])
  collection.code <- as.character(df[,collection.code])
  catalog.number <- as.character(df[,catalog.number])
  year.event <- df[,year.event]
  date.identified <- df[,date.identified]
  scientific.name <- as.character(df[,scientific.name])
  determined.by <- as.character(df[,determined.by])
  longitude <- df[,longitude]
  latitude <- df[,latitude]
  basis.of.rec <- df[,basis.of.rec]
  media.type <- df[,media.type]
  occ.id <- df[,occ.id]
  rowID <- rownames(df)


  data <- data.frame(rowID, occ.id, scientific.name, longitude, latitude,
                     year.event, determined.by, date.identified,
                     institution.source, collection.code,
                     catalog.number,media.type, basis.of.rec, stringsAsFactors = FALSE)
  if(na.rm.coords){
    ll.na <- is.na(data$longitude)
    data <- data[!ll.na,]
    lat.na <- is.na(data$latitude)
    data <- data[!lat.na,]
  }


 data
}




require(dplyr)
require(shiny)
require(shinyWidgets)

abrev.pttn <- function(df, linha){

  abv.num <- grep("Abbrev",colnames(df))

  abv1 <- abv.num[1]
  first.L <- paste0("\\<", df[linha, abv1])

  nonblank <- df[linha,-1]!=""
  nonblank <- c(FALSE, nonblank)

  pttn <- paste(unlist(df[linha ,nonblank]), collapse = '|')

  if(length(df[linha ,nonblank]) < 2)  pttn <- df[linha,abv1]


  res <- list(first.L, pttn)
  return(res)
}
# função 2

func.det.by.esp <- function(sp.df,i, specialist){

  padr.det <- abrev.pttn(specialist, i)

  g.det <- unique(grep(paste(specialist[i,1]), ignore.case = T,
                       sp.df$determined.by))

  g.det.1 <- unique(grep(padr.det[1], ignore.case = F,
                         sp.df$determined.by[g.det]))

  g.det.ok <- unique(grep(padr.det[2], ignore.case = F,
                          sp.df$determined.by[g.det[g.det.1]]))

  g.det[g.det.1[g.det.ok]]

}




# função 3
# seleciona da lista de especialistas aqueles que foram identificados no data.frame
pttn.all.specialist <- function(df){

  pttn <- character(nrow(df))
  for(i in 1:nrow(df)){

    nonblank <- df[i,]!=""
    pttn[i] <- paste(df[i ,nonblank], collapse = '|')

  }

  pttn.all <- paste(pttn, collapse = '|')
  pttn.all
}



# função 4


verify.specialist <- function(pattern, string){
  require(stringr)
  collection.new <- gsub(pattern, "", string, ignore.case = T)

  g_zero <- str_replace_all(collection.new, pattern = "[[:punct:]]", "")

  zero <- nchar(str_replace_all(g_zero, pattern = "\\s+", "")) == 0

  if(zero == T) return("")
  if(zero == F) return("_verify")

}
# função 5

specialist.conference <- function(pt.df, especialistas){
  spe.obs <- which(lapply(especialistas[,1],
                          function(x) grep(x, pt.df["determined.by"], ignore.case = T)) == 1)

  pttn.all <- pttn.all.specialist(especialistas[spe.obs,])
  verify <- verify.specialist(pttn.all, pt.df["determined.by"])

  crt <- paste0("1_det_by_spec", verify)
}

# função 6
has.det.ID <- function(sp.df){

  sem.det <- paste(c("Sem determinador","^NA$", "RRC ID Flag", "^NA $","^ $","^$", "^-$", "^_$"), collapse = '|')
  g.sem.det <- grep(sem.det, sp.df$determined.by)
  sem.det.ID <- c(which(is.na(sp.df$determined.by)), g.sem.det)

  ID <- !seq_along(sp.df$determined.by) %in%  sem.det.ID

  which(ID)
}

# função 7
check.spec <- function(class.occ, crit.levels, determined.by){

  sub <- class.occ$naturaList_levels == "1_det_by_spec_verify"
  if(any(sub)){
    cat(paste("There is", sum(sub), "specialists' names to be checked"))

    sub.occ <- class.occ[sub,]
    rowid.sub <- rownames(class.occ[sub,])
    answer <- vector("character", length(rowid.sub))

    for(i in 1:nrow(sub.occ)){
      ask <- paste(sub.occ[, determined.by], "\n", "Is this a specialist? (y/n)")
      answer[i] <- readline(ask)
      if(!any(answer[i] %in% c("y", "n"))) stop("Answer only 'y' or 'n'")
    }

    c.spec <- ifelse(answer == 'y', 1, 2)
    levels_checked <- paste0(c.spec, "_", crit.levels[c.spec])

    class.occ[rowid.sub, "naturaList_levels"] <- levels_checked
  }
  class.occ
}

# função 8
rm.coord.dup <- function(x, latitude, longitude){

  unique.row <- !duplicated(x[,c(latitude,longitude)])
  res <- x[unique.row,]
  row.names(res) <- 1:nrow(res)

  res
}

# função 9

pol.coords <- function(input.polig){

  pol.coords <- data.frame(x=numeric(),y=numeric())
  total <- length(input.polig$geometry$coordinates[[1]])
  long.pol <- numeric()
  lat.pol <- numeric()
  for (i in 1:total){
    long.pol <- input.polig$geometry$coordinates[[1]][[i]][[1]]
    lat.pol <- input.polig$geometry$coordinates[[1]][[i]][[2]]


    coords <- data.frame(x=long.pol,y=lat.pol)

    pol.coords <- rbind(pol.coords, coords)

  }

  pol.coords
}

# função 10
make.polygon <- function(df){

  # and then something like this
  sp <- SpatialPolygons(list(Polygons(list(Polygon(df)), 1)))
  sp

}
