occ.cl <-map_module(occ.cl) #delete points in the ocean
# download climate data
bioclim <- getData('worldclim', var='bio', res=10)
# Transform occurrence data in SpatialPointsDataFrame
spdf.occ.cl <- SpatialPoints(occ.cl[, c("decimalLongitude", "decimalLatitude")])
# redefine the extent of bioclim layers based on buffer around the occurrences
c.bioclim <- crop(bioclim, buffer(spdf.occ.cl, 100000)) # 100km buffer
df.temp.prec <- as.data.frame(raster.temp.prec)
# delimit the geographic space
# land area
land <- ne_countries(continent = 'south america')
un.land <- unionSpatialPolygons(land, land$scalerank)
#geo space based on intersect
i.geo.space <- intersect(un.land, buffer(spdf.occ.cl2, 200000))
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]]
### Define the environmental space for analysis
env.space <- define_env_space(df.temp.prec, buffer.size = 0.05)
# geo space based on crop
c.geo.space <- crop(un.land, c.bioclim)
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
### richness maps
## it makes more sense if there are more than one species
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
plot(rich.before.clean)
plot(rich.after.clean)
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
cl.eval$area
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
document()
?clean_eval
document()
?clean_eval
document()
?clean_eval
document()
?clean_eval
document()
?define_env_space
check()
importFrom("methods", "is")
usethis::use_pipe()
devtools::document()
usethis::use_package("vegan")
usethis::use_package("mrthods")
usethis::use_package("methods")
usethis::use_package("fasterize")
usethis::use_package("lwgeom")
usethis::use_package("rgeos")
usethis::use_package("SF")
usethis::use_package("sf")
document()
?clean_eval
document()
document()
?clean_eval
library(raster)
document()
?clean_eval
requireNamespace("shiny")
use_data(speciaLists)
usethis::use_build_ignore("wc10")
usethis::use_build_ignore("doc")
usethis::use_build_ignore("scipt_test.R")
utils::globalVariables(c("word", "n"))
use_package("htmltools")
use_package("methods")
check()
document()
check()
use_package("qpdf")
install.packages("qpdf")
use_data(speciaLists, overwrite = T)
use_data(A.setosa, overwrite = T)
check()
check()
?person
use_package("qpdf")
check()
check()
check()
occ.class <- classify_occ(A.setosa, speciaLists)
occ.grid <- grid_filter(occ.class)
occ.grid
check()
# Load package and data
library(naturaList)
data("A.setosa")
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
dim(speciaLists) # see ?speciaLists for details
# classification
occ.class <- classify_occ(A.setosa, speciaLists)
check()
use_package("rlang")
check()
library(rlang)
.data
rlang::.data
# Load package and data
library(naturaList)
data("A.setosa")
data("A.setosa")
data("speciaLists")
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
dim(speciaLists) # see ?speciaLists for details
# classification
occ.class <- classify_occ(A.setosa, speciaLists)
table(occ.class$naturaList_levels)
# create a specialist table example
br.musicians <- c("Caetano Veloso", "Antônio Carlos Tom Jobim",
"Gilberto Gil", "Vinícius de Morais")
spec_df <- create_spec_df(br.musicians)
spec_df
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
```{r get_det_names, eval=F, echo = F}
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
table(occ.class$naturaList_levels)
# grid filtering
occ.grid <- grid_filter(occ.class)
# grid filtering
occ.grid <- grid_filter(occ.class)
dim(occ.grid)
table(occ.grid$naturaList_levels)
# map module
occ.selected <- map_module(occ.grid)
check()
utils::globalVariables(c("decimalLatitude",
"decimalLongitude",
"n",
"naturaList_levels",
"species"))
check()
help("suppressForeignCheck")
check()
check()
document()
build_vignettes()
document()
?classify_occ
check()
spec_list <- c("Caetano Veloso", "Antônio Carlos Tom Jobim", "Gilberto Gil", "Vinícius de Morais")
spec_list
create_spec_df(spec_list)
occ.class <- classify_occ(A.setosa, speciaLists)
occ.class <- classify_occ(A.setosa, speciaLists)
data("A.setosa")
data("speciaLists")
occ.class <- classify_occ(A.setosa, speciaLists)
occ.class <- classify_occ(A.setosa, speciaLists)
check()
check()
library(devtools)
use_readme_md()
library(naturaList)
vignette(package = "naturaList")
vignette(package = naturaList)
vignette("naturaList_vignette")
vignette("naturaList_vignette.Rmd")
install_github("avrodrigues/naturaList", build_vignettes = T)
install_github("avrodrigues/naturaList", build_vignettes = T)
install_github("avrodrigues/naturaList", build_vignettes = T)
install_github("avrodrigues/naturaList", build_vignettes = T, force = T)
install.packages()
library(badgecreatr)
badgecreatr::badgeplacer()
badgecreatr::badgeplacer(name = "README.md")
badgecreatr::badgeplacer(githubrepo = "avrodrigues/naturaList", name = "README.md")
badge_lifecycle()
badge_packageversion()
badge_packageversion()
as.vector(read.dcf('DESCRIPTION')[, 'Version'])
gsub('-', '.', version)
ver <- as.vector(read.dcf('DESCRIPTION')[, 'Version'])
gsub('-', '.', ver)
badge_minimal_r_version()
badgeplacer()
badge_cran("naturaList")
usethis::use_github_actions()
usethis::use_pkgdown()
install.packages()
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::init_site()
pkgdown::build_site()
install.packages("htmltools")
install.packages("htmltools")
pkgdown::build_site()
badgecreatr::badge_packageversion()
usethis::use_article()
usethis::use_article("New ")
library(usethis)
library(devtools)
use_news_md()
check()
install.packages("Rcpp")
check()
library(naturaList)
library(devtools)
library(raster)
library(maptools)
library(rnaturalearth)
library(sf)
pkgs <- c("devtools", "raster", "maptools", "rnaturalearth", "sf")
lapply(pkgs, require, character.only = TRUE)
library(fasterize) ### needed in the package
data("A.setosa")
data("speciaLists")
# classify
occ.cl <- classify_occ(A.setosa, speciaLists, spec.ambiguity = "not.spec")
## check points
occ.cl <-map_module(occ.cl) #delete points in the ocean
# download climate data
bioclim <- getData('worldclim', var='bio', res=10)
# Transform occurrence data in SpatialPointsDataFrame
spdf.occ.cl <- SpatialPoints(occ.cl[, c("decimalLongitude", "decimalLatitude")])
# redefine the extent of bioclim layers based on buffer around the occurrences
c.bioclim <- crop(bioclim, buffer(spdf.occ.cl, 100000)) # 100km buffer
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]]
df.temp.prec <- as.data.frame(raster.temp.prec)
### Define the environmental space for analysis
env.space <- define_env_space(df.temp.prec, buffer.size = 0.05)
# delimit the geographic space
# land area
land <- ne_countries(continent = 'south america')
un.land <- unionSpatialPolygons(land, land$scalerank)
# geo space based on crop
c.geo.space <- crop(un.land, c.bioclim)
#geo space based on intersect
i.geo.space <- intersect(un.land, buffer(spdf.occ.cl2, 200000))
#geo space based on intersect
i.geo.space <- intersect(un.land, buffer(spdf.occ.cl, 200000))
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
vegan::decostand(na.omit(as.data.frame(raster.temp.prec)), "range",  na.rm = T)
vegan::decostand(as.data.frame(raster.temp.prec), "range",  na.rm = T)
dim(vegan::decostand(as.data.frame(raster.temp.prec), "range",  na.rm = T))
dim(vegan::decostand(na.omit(as.data.frame(raster.temp.prec)), "range",  na.rm = T))
load_all()
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
load_all()
vegan::decostand(na.omit(as.data.frame(raster.temp.prec)), "range",  na.rm = T)
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
load_all()
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
### richness maps
## it makes sense if there are more than one species
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
# species area map
comp.bc <- as.data.frame(cl.eval$comp$comp.BC)
comp.ac <- as.data.frame(cl.eval$comp$comp.AC)
c.setosa.bc <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.bc$`Cyathea setosa`)))
c.setosa.ac <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.ac$`Cyathea setosa`)))
plot(c.setosa.bc)
plot(c.setosa.ac)
check()
use_git_ignore("wc10")
build_site()
install.packages("sass")
build_site()
pkgdown::build_site()
library(naturaList)
library(devtools)
library(devtools)
library(raster)
library(maptools)
library(rnaturalearth)
library(sf)
library(devtools)
occ_allspp <- occ_search(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"),
limit = 5000, return = "data",
hasCoordinate = TRUE) # downloading occurrence data
library(rgbif)
occ_allspp <- occ_search(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"),
limit = 5000, return = "data",
hasCoordinate = TRUE) # downloading occurrence data
str(occ_allspp)
data_all_occ <- dplyr::bind_rows(sapply(1:length(occ_allspp),
function(x){
occ_allspp[[x]]$data
}
),
.id = "column_label")
tibble::tibble(data_all_occ)
cols_sub <- c(match(c("gbifID", "species", "year", "dateIdentified", "scientificName", "locality", "decimalLatitude", "decimalLongitude", "taxonKey", "basisOfRecord", "institutionCode", "collectionCode", "catalogNumber", "recordNumber", "identifiedBy", "recordedBy", "typeStatus", "occurrenceID"), colnames(data_all_occ)), 369) # renaming columns to contain all information that will be used for classification
cols_sub
data_all_occ_sub <- data_all_occ[, cols_sub]
cols_sub <- c(match(c("gbifID", "species", "year", "dateIdentified", "scientificName", "locality", "decimalLatitude", "decimalLongitude", "taxonKey", "basisOfRecord", "institutionCode", "collectionCode", "catalogNumber", "recordNumber", "identifiedBy", "recordedBy", "typeStatus", "occurrenceID"), colnames(data_all_occ)), 369) # renaming columns to contain all information that will be used for classification
data_all_occ_sub <- data_all_occ[, cols_sub]
data_all_occ_sub <- data_all_occ
# check out if there are strings which are not taxonomists
det_names_all <- get_det_names(data_all_occ_sub, freq = TRUE)
ig.names <- c("-", "Anonymous", "Unknown") # some possible characters that do not corresponds to a specialist
det_names_all
data("speciaLists") #specialist data frame
occ.class_all <- classify_occ(occ = data_all_occ_sub, spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
names(data_all_occ)
grep("media", names(data_all_occ))
grep("Type", names(data_all_occ))
grep("type", names(data_all_occ))
grep("type", names(data_all_occ), value = T)
head(data_all_occ$type)
head(data_all_occ$typeStatus)
unique(data_all_occ$typeStatus)
unique(data_all_occ$occurrenceStatus)
unique(data_all_occ$occurrenceRemarks)
unique(data_all_occ$identificationQualifier)
unique(data_all_occ$eventRemarks)
ig.names
unique(data_all_occ$associatedSequences)
names(data_all_occ)
occ_allspp <- occ_search(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"),
limit = 5000, return = "data",
hasCoordinate = TRUE) # downloading occurrence data
data_all_occ <- dplyr::bind_rows(sapply(1:length(occ_allspp),
function(x){
occ_allspp[[x]]$data
}
),
.id = "column_label")
data_all_occ <- dplyr::bind_rows(sapply(1:length(occ_allspp),
function(x){
occ_allspp[[x]]$data
}
),
.id = "column_label")
data_all_occ <- dplyr::bind_rows(sapply(1:length(occ_allspp),
function(x){
occ_allspp[[x]]$data
}
),
.id = "column_label")
# binding all occurrences in a single data frame
dim(data_all_occ)
cols_sub <- c(match(c("gbifID", "species", "year", "dateIdentified", "scientificName", "locality", "decimalLatitude", "decimalLongitude", "taxonKey", "basisOfRecord", "institutionCode", "collectionCode", "catalogNumber", "recordNumber", "identifiedBy", "recordedBy", "typeStatus", "occurrenceID"), colnames(data_all_occ)), 113) # renaming columns to contain all information that will be used for classification
data_all_occ_sub <- data_all_occ[, cols_sub]
colnames(data_all_occ_sub) <- c("gbifID", "species", "year", "dateIdentified", "scientificName", "locality", "decimalLatitude", "decimalLongitude", "taxonKey", "basisOfRecord", "institutionCode", "collectionCode", "catalogNumber", "recordNumber", "identifiedBy", "recordedBy", "typeStatus", "occurrenceID", "mediaType") # using only the information that will be used to classify the occurrences
# check out if there are strings which are not taxonomists
det_names_all <- get_det_names(data_all_occ_sub, freq = TRUE)
ig.names <- c("-", "Anonymous", "Unknown") # some possible characters that do not corresponds to a specialist
data("speciaLists") #specialist data frame
occ.class_all <- classify_occ(occ = data_all_occ_sub, spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
occ.class_all
speciaLists
data_all_occ_sub
ig.names
occ.class_all <- classify_occ(occ = data_all_occ_sub, spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
occ.class_all
data("A.setosa")
occ.class_all <- classify_occ(occ = A.setosa, spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
occ.class_all
reduce.df(data_all_occ_sub)
data_all_occ_sub
names(data_all_occ_sub)
data_all_occ_sub$occurrenceID
names(data_all_occ_sub)
unique(data_all_occ_sub$mediaType)
institution.source = "institutionCode"
collection.code = "collectionCode"
catalog.number = "catalogNumber"
year.event = "year"
date.identified = "dateIdentified"
scientific.name = "species"
determined.by = "identifiedBy"
longitude = "decimalLongitude"
latitude = "decimalLatitude"
basis.of.rec = "basisOfRecord"
media.type = "mediaType"
occ.id = "occurrenceID"
na.rm.coords = TRUE
df <- data_all_occ_sub
institution.source <- as.character(df[,institution.source])
institution.source
length(institution.source)
(df[,institution.source]
)
class(data_all_occ_sub)
data_all_occ_sub
as.data.frame(data_all_occ_sub)
df <- as.data.frame(data_all_occ_sub)
institution.source <- as.character(df[,institution.source])
institution.source
reduce.df <- function(df,
institution.source = "institutionCode",
collection.code = "collectionCode",
catalog.number = "catalogNumber",
year.event = "year",
date.identified = "dateIdentified",
scientific.name = "species",
determined.by = "identifiedBy",
longitude = "decimalLongitude",
latitude = "decimalLatitude",
basis.of.rec = "basisOfRecord",
media.type = "mediaType",
occ.id = "occurrenceID",
na.rm.coords = TRUE){
institution.source <- as.character(df[,institution.source])
collection.code <- as.character(df[,collection.code])
catalog.number <- as.character(df[,catalog.number])
year.event <- df[,year.event]
date.identified <- df[,date.identified]
scientific.name <- as.character(df[,scientific.name])
determined.by <- as.character(df[,determined.by])
longitude <- df[,longitude]
latitude <- df[,latitude]
basis.of.rec <- df[,basis.of.rec]
media.type <- df[,media.type]
occ.id <- df[,occ.id]
rowID <- rownames(df)
data <- data.frame(rowID, occ.id, scientific.name, longitude, latitude,
year.event, determined.by, date.identified,
institution.source, collection.code,
catalog.number,media.type, basis.of.rec, stringsAsFactors = FALSE)
if(na.rm.coords){
ll.na <- is.na(data$longitude)
data <- data[!ll.na,]
lat.na <- is.na(data$latitude)
data <- data[!lat.na,]
}
data
}
institution.source = "institutionCode"
institution.source <- as.character(df[,institution.source])
institution.source
reduce.df(as.data.frame(data_all_occ_sub))
occ.class_all <- classify_occ(occ = as.data.frame(data_all_occ_sub), spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
occ.class_all
is(data_all_occ_sub, "tbl")
is(data_all_occ_sub, "data.frame")
is(data_all_occ_sub, "tbl")
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/classify_occ.R', encoding = 'UTF-8', echo=TRUE)
occ.class_all <- classify_occ(occ = data_all_occ_sub, spec = speciaLists, ignore.det.names = ig.names, na.rm.coords = TRUE)
occ.class_all
table(occ.class_all$naturaList_levels)
?rgbif
help(package = "rgbif")
(key <- name_backbone(name= c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"))$speciesKey)
occ_data(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"), limit = 4)
occ_allspp <- occ_data(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"), limit = 4)
names(occ_allspp)
names(occ_allspp$`Alsophila setosa`)
names(occ_allspp$`Alsophila setosa`$data)
occ_allspp <- occ_data(scientificName = c("Alsophila setosa", "Cyathea corcovadensis", "Cyathea phalerata"), limit = 5000)
names(occ_allspp$`Alsophila setosa`$data)
grep("media", names(occ_allspp$`Alsophila setosa`$data))
grep("type", names(occ_allspp$`Alsophila setosa`$data))
grep("type", names(occ_allspp$`Alsophila setosa`$data), value = T)
