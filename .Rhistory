plot(i.geo.space)
un.land <- unionSpatialPolygons(land, land$scalerank)
c.geo.space <- crop(un.land, c.bioclim)
i.geo.space <- intersect(un.land, buffer(spdf.occ.cl2, 200000))
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
raster.temp.prec
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]])
df.temp.prec <- as.data.frame(raster.temp.prec)
c.bioclim[[c("bio1", "bio12")]])
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]]
df.temp.prec <- as.data.frame(raster.temp.prec)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
level.filter = c("1_det_by_spec")
occ.cl2 %>%
filter(naturaList_levels %in% level.filter)
occ.cl2$naturaList_levels
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/clean_eval.R', echo=TRUE)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
occ.cl2$species
library(fasterize)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/clean_eval.R', echo=TRUE)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
occ <- occ.cl2
i = unique(occ$species)
i
x <- dplyr::filter(occ, species == i)
pt <- sf::st_multipoint(as.matrix(x[,1:2]))
x
occ <- occ.cl2[, c("decimalLongitude", "decimalLatitude", "species")]
pt <- sf::st_multipoint(as.matrix(x[,1:2]))
x <- dplyr::filter(occ, species == i)
pt <- sf::st_multipoint(as.matrix(x[,1:2]))
if(nrow(x) <=3){
sp.pol <- sf::st_buffer(pt, 0.5)
}
if(nrow(x) > 3){
sp.pol <- sf::st_convex_hull(pt)
sp.pol <- sf::st_buffer(sp.pol, 0.5)
}
sp.pol
geo <- sf::st_geometry(sp.pol)
geo
geo.space = i.geo.space
suppressMessages(sf::st_intersection(geo, geo.space))
geo <- sf::st_geometry(sp.pol)
st_crs(geo) <- 4326
sf::st_intersection(geo, geo.space)
class(geo.space)
as.character(class(geo.space))
st_as_sf(geo.space)
is(geo.space, "sp")
is(geo.space, "SpatialPolygons")
is(geo.space, "SpatialPoints")
is(spdf.occ.cl2, "SpatialPoints")
is(spdf.occ.cl2, "Spatial")
is(spdf.occ.cl2, "Spatial*")
is(spdf.occ.cl2, "Sp")
is(spdf.occ.cl2, "Spatia")
is(spdf.occ.cl2, "Spatial")
is(geo.space, "Spatial")
is(st_as_sf(geo.space), "Spatial")
is(st_as_sf(geo.space), "sf")
is(st_as_sf(geo.space), "sfc")
is(st_as_sf(geo.space), "sfc")
is(st_as_sf(geo.space), "sfc")
is(st_as_sf(geo.space), "sf")
is(st_as_sf(geo.space), c("SpatialPolygon", sf"))
)
)
xfc
asd
)))))
""
is(st_as_sf(geo.space), c("SpatialPolygon", "sf"))
is(st_as_sf(geo.space), c("sp", "sf"))
is((geo.space), c("sp", "sf"))
is(geo.space, c("sp", "sf"))
is(geo.space, c("sp"))
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/clean_eval.R', echo=TRUE)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
install.packages("lwgeom")
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/clean_eval.R', echo=TRUE)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = i.geo.space,
r = raster.temp.prec)
cl.eval
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
plot(rich.before.clean)
plot(rich.after.clean)
plot(rich.before.clean)
plot(rich.after.clean)
occ.cl2 %>%
select(naturaList_levels %in% level.filter)
# species area map
comp <- cl.eval$comp
comp.ac <- cl.eval$comp$comp.AC
colnames(comp.ac)
comp.ac[,1]
cbind(cbind(cl.eval$site.coords,comp.ac[,1] )
)
names(cbind(cbind(cl.eval$site.coords,comp.ac[,1] )))
colnames(cbind(cbind(cl.eval$site.coords,comp.ac[,1] )))
comp.ac <- as.data.frame(cl.eval$comp$comp.AC)
# species area map
comp.bc <- as.data.frame(cl.eval$comp$comp.BC)
comp.ac <- as.data.frame(cl.eval$comp$comp.AC)
cbind(cbind(cl.eval$site.coords,comp.ac$`Cyathea setosa` )
)
c.setosa <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.ac$`Cyathea setosa`))
)
c.setosa <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.ac$`Cyathea setosa`)))
plot(c.setosa)
c.setosa <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.bc$`Cyathea setosa`)))
plot(c.setosa)
c.setosa.bc <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.bc$`Cyathea setosa`)))
c.setosa.ac <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.ac$`Cyathea setosa`)))
plot(c.setosa.ac)
plot(c.setosa.bc)
plot(c.setosa.ac)
library(devtools)
check()
importFrom("methods", "is")
importFrom("stats", "na.omit")
importFrom("utils", "setTxtProgressBar", "txtProgressBar")
t <- data.frame(a = 1:10, b = 1:10)
t <- data.frame(a = 1:10, b = 1:10)
t.a <- "a"
library(dplyr)
t %>%
dplyr::rename(t.a = "asd")
t %>%
dplyr::rename("asd" = t.a )
t %>%
dplyr::rename("a" = t.a )
t %>%
dplyr::rename("d" = t.a )
library(naturaList)
library(devtools)
library(raster)
library(maptools)
library(rnaturalearth)
library(sf)
library(fasterize) ### needed in the package
data("A.setosa")
data("speciaLists")
load_all()
data("A.setosa")
data("speciaLists")
# classify
occ.cl <- classify_occ(A.setosa, speciaLists, spec.ambiguity = "not.spec")
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
library(naturaList)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
library(shinydashboard)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
requireNamespace(shiny)
requireNamespace("shiny")
load_all()
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
library(naturaList)
library(devtools)
library(raster)
library(maptools)
library(rnaturalearth)
library(sf)
library(fasterize) ### needed in the package
data("A.setosa")
data("speciaLists")
# classify
occ.cl <- classify_occ(A.setosa, speciaLists, spec.ambiguity = "not.spec")
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
# check points
occ.cl2 <-map_module(occ.cl) #delete points in the ocean
pkgs <- c("devtools", "raster", "maptools", "rnaturalearth", "sf")
require(pkgs)
pkgs <- c("devtools", "raster", "maptools", "rnaturalearth", "sf")
require(pkgs)
require(pkgs, character.only = T)
lapply(pkgs, require)
lapply(pkgs, require, character.only = TRUE)
data("A.setosa")
data("speciaLists")
# classify
occ.cl <- classify_occ(A.setosa, speciaLists, spec.ambiguity = "not.spec")
# download climate data
bioclim <- getData('worldclim', var='bio', res=10)
# Transform occurrence data in SpatialPointsDataFrame
spdf.occ.cl <- SpatialPointsDataFrame(occ.cl[, c("decimalLongitude", "decimalLatitude")], occ.cl2)
# Transform occurrence data in SpatialPointsDataFrame
spdf.occ.cl <- SpatialPoints(occ.cl[, c("decimalLongitude", "decimalLatitude")])
# redefine the extent of bioclim layers based on buffer around the occurrences
c.bioclim <- crop(bioclim, buffer(spdf.occ.cl, 100000)) # 100km buffer
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]]
df.temp.prec <- as.data.frame(raster.temp.prec)
### Define the environmental space for analysis
env.space <- define_env_space(df.temp.prec, buffer.size = 0.05)
# delimit the geographic space
# land area
land <- ne_countries(continent = 'south america')
un.land <- unionSpatialPolygons(land, land$scalerank)
# geo space based on crop
c.geo.space <- crop(un.land, c.bioclim)
cl.eval <- clean_eval(occ.cl2,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
raster.temp.prec
as.data.frame(raster.temp.prec)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/clean_eval.R', echo=TRUE)
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
### richness maps
## it makes more sense if there are more than one species
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
# species area map
comp.bc <- as.data.frame(cl.eval$comp$comp.BC)
comp.ac <- as.data.frame(cl.eval$comp$comp.AC)
c.setosa.bc <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.bc$`Cyathea setosa`)))
c.setosa.ac <- rasterFromXYZ(cbind(cbind(cl.eval$site.coords,
comp.ac$`Cyathea setosa`)))
plot(c.setosa.bc)
plot(c.setosa.ac)
plot(rich.before.clean)
plot(rich.after.clean)
plot(c.setosa.bc)
plot(c.setosa.ac)
## check points
occ.cl <-map_module(occ.cl) #delete points in the ocean
## check points
occ.cl <-map_module(occ.cl) #delete points in the ocean
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/map_module.R', echo=TRUE)
## check points
occ.cl <-map_module(occ.cl) #delete points in the ocean
# download climate data
bioclim <- getData('worldclim', var='bio', res=10)
# Transform occurrence data in SpatialPointsDataFrame
spdf.occ.cl <- SpatialPoints(occ.cl[, c("decimalLongitude", "decimalLatitude")])
# redefine the extent of bioclim layers based on buffer around the occurrences
c.bioclim <- crop(bioclim, buffer(spdf.occ.cl, 100000)) # 100km buffer
df.temp.prec <- as.data.frame(raster.temp.prec)
# delimit the geographic space
# land area
land <- ne_countries(continent = 'south america')
un.land <- unionSpatialPolygons(land, land$scalerank)
#geo space based on intersect
i.geo.space <- intersect(un.land, buffer(spdf.occ.cl2, 200000))
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
# select two layers
raster.temp.prec <- c.bioclim[[c("bio1", "bio12")]]
### Define the environmental space for analysis
env.space <- define_env_space(df.temp.prec, buffer.size = 0.05)
# geo space based on crop
c.geo.space <- crop(un.land, c.bioclim)
cl.eval <- clean_eval(occ.cl,
env.space = env.space,
geo.space = c.geo.space,
r = raster.temp.prec)
### richness maps
## it makes more sense if there are more than one species
rich.before.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.BC))
plot(rich.before.clean)
plot(rich.after.clean)
rich.after.clean <- rasterFromXYZ(cbind(cl.eval$site.coords,
cl.eval$rich$rich.AC))
plot(rich.before.clean)
plot(rich.after.clean)
cl.eval$area
cl.eval$area
cl.eval$comp
cl.eval$rich
cl.eval$site.coords
document()
?clean_eval
document()
?clean_eval
document()
?clean_eval
document()
?clean_eval
document()
?define_env_space
check()
importFrom("methods", "is")
usethis::use_pipe()
devtools::document()
usethis::use_package("vegan")
usethis::use_package("mrthods")
usethis::use_package("methods")
usethis::use_package("fasterize")
usethis::use_package("lwgeom")
usethis::use_package("rgeos")
usethis::use_package("SF")
usethis::use_package("sf")
document()
?clean_eval
document()
document()
?clean_eval
library(raster)
document()
?clean_eval
requireNamespace("shiny")
use_data(speciaLists)
usethis::use_build_ignore("wc10")
usethis::use_build_ignore("doc")
usethis::use_build_ignore("scipt_test.R")
utils::globalVariables(c("word", "n"))
use_package("htmltools")
use_package("methods")
check()
document()
check()
use_package("qpdf")
install.packages("qpdf")
use_data(speciaLists, overwrite = T)
use_data(A.setosa, overwrite = T)
check()
check()
?person
use_package("qpdf")
check()
check()
check()
occ.class <- classify_occ(A.setosa, speciaLists)
occ.grid <- grid_filter(occ.class)
occ.grid
check()
# Load package and data
library(naturaList)
data("A.setosa")
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
dim(speciaLists) # see ?speciaLists for details
# classification
occ.class <- classify_occ(A.setosa, speciaLists)
check()
use_package("rlang")
check()
library(rlang)
.data
rlang::.data
# Load package and data
library(naturaList)
data("A.setosa")
data("A.setosa")
data("speciaLists")
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
data("speciaLists")
# see the size of datasets
dim(A.setosa) # see ?A.setosa for details
dim(speciaLists) # see ?speciaLists for details
# classification
occ.class <- classify_occ(A.setosa, speciaLists)
table(occ.class$naturaList_levels)
# create a specialist table example
br.musicians <- c("Caetano Veloso", "Antônio Carlos Tom Jobim",
"Gilberto Gil", "Vinícius de Morais")
spec_df <- create_spec_df(br.musicians)
spec_df
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
```{r get_det_names, eval=F, echo = F}
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# check out if there are strings which are not taxonomists
get_det_names(A.setosa)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
# include these strings in a object
ig.names <- c("Sem Informação" , "Anonymous")
# use 'ignore.det.names' to ignore those strings in classify_occ()
occ.class <- classify_occ(A.setosa, speciaLists, ignore.det.names = ig.names)
table(occ.class$naturaList_levels)
# grid filtering
occ.grid <- grid_filter(occ.class)
# grid filtering
occ.grid <- grid_filter(occ.class)
dim(occ.grid)
table(occ.grid$naturaList_levels)
# map module
occ.selected <- map_module(occ.grid)
check()
utils::globalVariables(c("decimalLatitude",
"decimalLongitude",
"n",
"naturaList_levels",
"species"))
check()
help("suppressForeignCheck")
check()
check()
document()
build_vignettes()
document()
?classify_occ
check()
spec_list <- c("Caetano Veloso", "Antônio Carlos Tom Jobim", "Gilberto Gil", "Vinícius de Morais")
spec_list
create_spec_df(spec_list)
occ.class <- classify_occ(A.setosa, speciaLists)
occ.class <- classify_occ(A.setosa, speciaLists)
data("A.setosa")
data("speciaLists")
occ.class <- classify_occ(A.setosa, speciaLists)
occ.class <- classify_occ(A.setosa, speciaLists)
check()
check()
