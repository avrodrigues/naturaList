# função 8
rm.coord.dup <- function(x){
unique.row <- !duplicated(x[,c(latitude,longitude)])
res <- x[unique.row,]
row.names(res) <- 1:nrow(res)
res
}
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
# função 8
rm.coord.dup <- function(x, latitude, longitude){
unique.row <- !duplicated(x[,c(latitude,longitude)])
res <- x[unique.row,]
row.names(res) <- 1:nrow(res)
res
}
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
grep("1", gf.occ.resol$naturaList_levels)
grep("5", gf.occ.resol$naturaList_levels)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
classify_occ(c.occ,
na.rm.coords = T,
crit.levels = c_levels)
occ.rec <- read.csv("../www/Alsophila_setosa.csv", sep = "\t", encoding = "UTF-8")
spec.data <- read.csv("../www/fern_specialists.csv", encoding = "UTF-8")
source("R/classify_occ.R")
source("R/grid_filter.R")
source("R/internal_functions.R")
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
r.occ.rec <- reduce.df(occ.rec, na.rm = TRUE)
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c.occ
c_levels = c("det_by_spec",
"field_obs",
"sci_colection",
"no_criteria_met")
classify_occ(c.occ,
spec.data,
na.rm.coords = T,
crit.levels = c_levels)
table(c.occ$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
gf.occ
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
gf.occ <- grid_filter(c.occ, r = ras)
points(gf.occ[, c("decimalLongitude", "decimalLatitude")], col = "blue", pch = 16)
table(gf.occ$naturaList_levels)
ras
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ
map_module(c.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module()
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
c.occ
map_module(gf.occ.resol)
gf.occ.resol
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c_levels = c("det_by_spec",
"field_obs",
"sci_colection",
"no_criteria_met")
classify_occ(c.occ,
spec.data,
na.rm.coords = T,
crit.levels = c_levels)
ras <- raster(resolution = c(5,5),
xmn = -60,
xmx = -30,
ymn = -30,
ymx = -20)
ras <- setValues(ras, rep(1,ncell(ras)))
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
points(gf.occ[, c("decimalLongitude", "decimalLatitude")], col = "blue", pch = 16)
table(gf.occ$naturaList_levels)
map_module(gf.occ)
map_module(gf.occ.resol)
str(gf.occ.resol)
str(gf.occ)
map_module(gf.occ.resol)
map_module(gf.occ)
map_module(c.occ)
sapply(c.occ, class)
sapply(c.occ, class) == sapply(gf.occ.resol, class)
sapply(c.occ, class) == sapply(gf.occ, class)
map_module(gf.occ)
map_module(c.occ)
map_module(c.occ)
c.occ$eventDate
as.Date(c.occ$eventDate)
as.Date(gf.occ$eventDate)
as.Date(gf.occ.resol$eventDate)
map_module(gf.occ)
map_module(c.occ)
map_module(gf.occ)
map_module(c.occ)
sapply(c.occ, class) == sapply(gf.occ, class)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
map_module(gf.occ.resol)
str(gf.occ)
as.Date(gf.occ.resol$eventDate)
as.Date(c.occ$eventDate)
as.Date(gf.occ$eventDate)
as.Date(gf.occ$decimalLatitude)
(gf.occ$decimalLatitude)
(gf.occ$decimalLongitude)
map_module(gf.occ)
(gf.occ$eventDate)
(gf.occ$eventDate)[6]
(gf.occ$eventDate)
as.character(gf.occ$eventDate)
as.Date(as.character(gf.occ$eventDate))
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
as.Date(as.character(gf.occ$dateIdentified))
map_module(c.occ)
as.Date(as.character(c.occ$dateIdentified))
c.occ$dateIdentified
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
map_module(c.occ)
map_module(gf.occ.resol)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
library(devtools)
library(roxygen2)
rm(list = ls())
library(naturaList)
ls()
alsophila_setosa <- read.csv("../www/Alsophila_setosa.csv", sep = "\t", encoding = "UTF-8")
specialists_data <- read.csv("../www/fern_specialists.csv", encoding = "UTF-8")
cl.data <- classify_occ(alsophila_setosa, specialists_data)
y;y;y;y
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data
table(cl.data)
table(cl.data$naturaList_levels)
gr.filter <- grid_filter(cl.data, grid.resolution = c(1.5,1.5) )
table(gr.filter$naturaList_levels)
#check for ouliers in occurence points
a.setosa.occ <- map_module(gr.filter)
a.setosa.occ
a.setosa.occ
table(a.setosa.occ$naturaList_levels)
table(gr.filter$naturaList_levels)
# classification
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data
#check for ouliers in occurence points
a.setosa.occ <- map_module(gr.filter)
a.setosa.occ
dim(alsophila_setosa)
library(readr)
library(dplyr)
#Text mining packages
library(tm)
library(SnowballC)
install.packages(c("tm" , "SnowballC"))
#Text mining packages
library(tm)
library(SnowballC)
#loading the data
t1 <- read_csv("ml_text_data.csv")
glimpse(t1)
names(t1)
cols <- c("Clothing ID", "Review Text", "Recommended IND")
t1 <- t1[sample(1:nrow(t1), 500),cols]
corpus <- Corpus(VectorSource(t1$Review_Text))
names(t1) <- gsub(" ", "_", names(t1))
corpus <- Corpus(VectorSource(t1$Review_Text))
corpus[[1]][1]
t1$Recommended_IND[1]
corpus
corpus[[1]]
#loading the data
t1 <- read_csv("ml_text_data.csv")
glimpse(t1)
names(t1)
cols <- c("Clothing ID", "Review Text", "Recommended IND")
t1 <- t1[,cols]
names(t1) <- gsub(" ", "_", names(t1))
corpus <- Corpus(VectorSource(t1$Review_Text))
corpus[[1]][1]
t1$Recommended_IND[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
Corpus[[1]][1]
t1 <- t1[!is.na(t1$Review_Text),]
corpus <- Corpus(VectorSource(t1$Review_Text))
corpus[[1]][1]
t1$Recommended_IND[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
Corpus[[1]][1]
corpus[[1]][1]
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]][1]
corpus <- tm_map(corpus, removeWords, c("cloth", stopwords("english")))
corpus[[1]][1]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]][1]
frequencies <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
tSparse <- as.data.frame(as.matrix(sparse))
colnames(tSparse) <- make.names(colnames(tSparse))
tSparse$recommended_id <- t1$Recommended_IND
prop.table(table(tSparse$recommended_id)) #73.6% is the baseline accuracy
library(caTools)
set.seed(100)
split = sample.split(tSparse$recommended_id, SplitRatio = 0.7)
trainSparse = subset(tSparse, split==TRUE)
testSparse = subset(tSparse, split==FALSE)
library(randomForest)
set.seed(100)
trainSparse$recommended_id = as.factor(trainSparse$recommended_id)
testSparse$recommended_id <- as.factor(testSparse$recommended_id )
#Lines 5 to 7
RF_model <- randomForest(recommended_id ~ ., data=trainSparse)
predictRF <- predict(RF_model, newdata=testSparse)
table(testSparse$recommended_id, predictRF)
colSums(table(testSparse$recommended_id, predictRF))
6318/(6318+474)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/classify_occ.R', echo=TRUE)
library(rgbif)
install.packages(rgbif)
kk
install.packages("rgbif")
library(rgbif)
c.reitz <- occ_search(scientificName = "Campomanesia reitzii",
hasCoordinate = T,
country = "BR")
install.packages(‘httpcode’)
install.packages('httpcode')
c.reitz <- occ_search(scientificName = "Campomanesia reitzii",
hasCoordinate = T,
country = "BR")
library(naturaList)
data("A.setosa")
data("speciaLists")
occ.cl <- classify_occ(A.setosa, speciaLists)
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/classify_occ.R', echo=TRUE)
occ.cl <- classify_occ(A.setosa, speciaLists)
spec_1 <- grep("1_", occ.cl$naturaList_levels)
names(occ.cl)
occ.to.mod <- occ.cl[c(spec_1, tax_0),
c("identifiedBy","naturaList_levels")]
spec_1 <- grep("1_", occ.cl$naturaList_levels)
tax_0 <- grep("2_", occ.cl$naturaList_levels)
occ.to.mod <- occ.cl[c(spec_1, tax_0),
c("identifiedBy","naturaList_levels")]
occ.to.mod
corpus <- Corpus(VectorSource(occ.to.mod$identifiedBy))
corpus[[1]][1]
occ.to.mod$identifiedBy[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus[[1]][1]
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]][1]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]][1]
frequencies <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
tSparse <- as.data.frame(as.matrix(sparse))
colnames(tSparse) <- make.names(colnames(tSparse))
tSparse$naturaList_levels <- occ.to.mod$naturaList_levels
tSparse$naturaList_levels
tSparse$naturaList_levels <- as.factor(as.character(occ.to.mod$naturaList_levels))
tSparse$naturaList_levels
prop.table(table(tSparse$naturaList_levels)) #81.9% is the baseline accuracy
library(caTools)
set.seed(100)
split <- sample.split(tSparse$naturaList_levels, SplitRatio = 0.7)
trainSparse <- subset(tSparse, split==TRUE)
testSparse <- subset(tSparse, split==FALSE)
trainSparse
testSparse
library(randomForest)
set.seed(100)
set.seed(100)
trainSparse$naturaList_levels <- as.factor(trainSparse$naturaList_levels)
testSparse$naturaList_levels <- as.factor(testSparse$naturaList_levels )
#Lines 5 to 7
RF_model <- randomForest(naturaList_levels ~ ., data=trainSparse)
predictRF <- predict(RF_model, newdata=testSparse)
colSums(table(testSparse$recommended_id, predictRF))
testSparse$recommended_id
colSums(table(testSparse$naturaList_levels, predictRF))
#Lines 5 to 7
RF_model <- randomForest(naturaList_levels ~ ., data=trainSparse)
predictRF <- predict(RF_model, newdata=testSparse)
colSums(table(testSparse$naturaList_levels, predictRF))
predictRF
colSums(table(testSparse$naturaList_levels, predictRF))
table(tSparse$naturaList_levels)
testSparse
corpus <- Corpus(VectorSource(occ.to.mod$identifiedBy))
occ.to.mod$identifiedBy[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus[[1]][1]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]][1]
frequencies <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
tSparse <- as.data.frame(as.matrix(sparse))
colnames(tSparse) <- make.names(colnames(tSparse))
tSparse$naturaList_levels <- as.factor(as.character(occ.to.mod$naturaList_levels))
prop.table(table(tSparse$naturaList_levels)) #22% is the baseline accuracy
library(caTools)
set.seed(100)
split <- sample.split(tSparse$naturaList_levels, SplitRatio = 0.7)
trainSparse <- subset(tSparse, split==TRUE)
testSparse <- subset(tSparse, split==FALSE)
library(randomForest)
set.seed(100)
trainSparse$naturaList_levels <- as.factor(trainSparse$naturaList_levels)
prop.table(table(tSparse$naturaList_levels)) #22% is the baseline accuracy
library(caTools)
set.seed(100)
split <- sample.split(tSparse$naturaList_levels, SplitRatio = 0.7)
trainSparse <- subset(tSparse, split==TRUE)
testSparse <- subset(tSparse, split==FALSE)
library(randomForest)
set.seed(100)
trainSparse$naturaList_levels <- as.factor(trainSparse$naturaList_levels)
testSparse$naturaList_levels <- as.factor(testSparse$naturaList_levels )
#Lines 5 to 7
RF_model <- randomForest(naturaList_levels ~ ., data=trainSparse)
predictRF <- predict(RF_model, newdata=testSparse)
colSums(table(testSparse$naturaList_levels, predictRF))
predictRF
testSparse
tSparse
#loading the data
t1 <- read_csv("ml_text_data.csv")
glimpse(t1)
names(t1)
cols <- c("Clothing ID", "Review Text", "Recommended IND")
t1 <- t1[,cols]
names(t1) <- gsub(" ", "_", names(t1))
t1 <- t1[!is.na(t1$Review_Text),]
corpus <- Corpus(VectorSource(t1$Review_Text))
corpus[[1]][1]
t1$Recommended_IND[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus[[1]][1]
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]][1]
corpus <- tm_map(corpus, removeWords, c("cloth", stopwords("english")))
corpus[[1]][1]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]][1]
frequencies <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
tSparse <- as.data.frame(as.matrix(sparse))
colnames(tSparse) <- make.names(colnames(tSparse))
tSparse$recommended_id <- t1$Recommended_IND
prop.table(table(tSparse$recommended_id)) #81.9% is the baseline accuracy
tSparse
split <- sample.split(tSparse$recommended_id, SplitRatio = 0.7)
trainSparse <- subset(tSparse, split==TRUE)
testSparse <- subset(tSparse, split==FALSE)
library(randomForest)
set.seed(100)
trainSparse$recommended_id <- as.factor(trainSparse$recommended_id)
testSparse$recommended_id <- as.factor(testSparse$recommended_id )
trainSparse$recommended_id
occ.to.mod
corpus <- Corpus(VectorSource(occ.to.mod$identifiedBy))
occ.to.mod$identifiedBy[1]
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus[[1]][1]
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]][1]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]][1]
frequencies <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
tSparse <- as.data.frame(as.matrix(sparse))
colnames(tSparse) <- make.names(colnames(tSparse))
tSparse$naturaList_levels <- ifelse(occ.to.mod$naturaList_levels == "2_taxonomist",
0,
1)
prop.table(table(tSparse$naturaList_levels)) #22% is the baseline accuracy
library(caTools)
set.seed(100)
split <- sample.split(tSparse$naturaList_levels, SplitRatio = 0.7)
trainSparse <- subset(tSparse, split==TRUE)
testSparse <- subset(tSparse, split==FALSE)
library(randomForest)
set.seed(100)
trainSparse$naturaList_levels <- as.factor(trainSparse$naturaList_levels)
testSparse$naturaList_levels <- as.factor(testSparse$naturaList_levels )
#Lines 5 to 7
RF_model <- randomForest(naturaList_levels ~ ., data=trainSparse)
predictRF <- predict(RF_model, newdata=testSparse)
colSums(table(testSparse$naturaList_levels, predictRF))
# Accuracy
17/(69+17) #93%
library(devtools)
document()
usethis::use_version("patch")
usethis::use_version("patch")
usethis::use_version("patch")
library(naturaList)
data("speciaLists")
source('C:/Users/avrodrigues/OneDrive - Universidade Federal do Rio Grande do Sul/R/naturaList/R/internal_functions.R', encoding = 'UTF-8', echo=TRUE)
abrev.pttn(speciaLists, 1)
abrev.pttn(speciaLists, 2)
speciaLists
abrev.pttn(speciaLists, 2)
data("A.setosa")
red.occ <- reduce.df(A.setosa)
func.det.by.esp(A.setosa, 10, speciaLists)
func.det.by.esp(A.setosa, 11, speciaLists)
func.det.by.esp(A.setosa, 1, speciaLists)
func.det.by.esp(A.setosa, 50, speciaLists)
func.det.by.esp(A.setosa, 1, speciaLists)
func.det.by.esp(A.setosa, 2, speciaLists)
func.det.by.esp(A.setosa, 3, speciaLists)
func.det.by.esp(A.setosa, 4, speciaLists)
func.det.by.esp(A.setosa, 5, speciaLists)
func.det.by.esp(A.setosa, 6, speciaLists)
A.setosa
func.det.by.esp(red.occ, 6, speciaLists)
func.det.by.esp(red.occ, 2, speciaLists)
func.det.by.esp(red.occ, 1, speciaLists)
func.det.by.esp(red.occ, 2, speciaLists)
red.occ[func.det.by.esp(red.occ, 2, speciaLists),]
red.occ[func.det.by.esp(red.occ, 3, speciaLists),]
red.occ[func.det.by.esp(red.occ, 4, speciaLists),]
red.occ[func.det.by.esp(red.occ, 5, speciaLists),]
red.occ[func.det.by.esp(red.occ, 6, speciaLists),]
red.occ[func.det.by.esp(red.occ, 7, speciaLists),]
red.occ[func.det.by.esp(red.occ, 6, speciaLists),]
red.occ[func.det.by.esp(red.occ, 8, speciaLists),]
red.occ[func.det.by.esp(red.occ, 9, speciaLists),]
speciaLists[,9]
speciaLists[9,]
remotes::install_github("avrodrigues/naturaList", force = T)
remotes::install_github("avrodrigues/naturaList", force = T)
