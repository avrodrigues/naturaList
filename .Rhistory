inputId = "grbox", label = "What levels should be downloaded
from grid filter data?",
choices = c("Level 1" = "Level_1",
"Level 2" = "Level_2",
"Level 3" = "Level_3",
"Level 4" = "Level_4",
"Level 5" = "Level_5",
"Level 6" = "Level_6"),
justified = T, status = 'info', size = "xs", direction = "vertical",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
selected = c("Level_1",
"Level_2",
"Level_3",
"Level_4",
"Level_5",
"Level_6"),
width = "100%"
),
materialSwitch("del_mkr_button",
label = "Delete points with click",
status = "danger")
),
box(width = NULL, title = "Download",
solidHeader = T, status = "success",
textOutput("sel_display"),
downloadButton("download_grid_filter.csv","Download from grid filter"),br(),br(),
textOutput("down.class.text"),
downloadButton("download_classified.csv","Download from classifier")
)
),
column(9,
leafletOutput("map", height = 500),
verbatimTextOutput("issue")
)
)
server <- function(input, output, session){}
shinyApp(ui, server)
)
}
map_module <- function(occ.cl){
relibrary(shiny)
library(shinyWidgets)
library(shinydashboard)
library(leaflet)
library(raster)
library(rgdal)
#require(mapview)
#require(mapedit)
require(leaflet.extras)
library(shinyLP)
ui <- fluidPage(
fluidRow(
column(3,
box(width = NULL,
checkboxGroupButtons(
inputId = "grbox", label = "What levels should be downloaded
from grid filter data?",
choices = c("Level 1" = "Level_1",
"Level 2" = "Level_2",
"Level 3" = "Level_3",
"Level 4" = "Level_4",
"Level 5" = "Level_5",
"Level 6" = "Level_6"),
justified = T, status = 'info', size = "xs", direction = "vertical",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
selected = c("Level_1",
"Level_2",
"Level_3",
"Level_4",
"Level_5",
"Level_6"),
width = "100%"
),
materialSwitch("del_mkr_button",
label = "Delete points with click",
status = "danger")
),
box(width = NULL, title = "Download",
solidHeader = T, status = "success",
textOutput("sel_display"),
downloadButton("download_grid_filter.csv","Download from grid filter"),br(),br(),
textOutput("down.class.text"),
downloadButton("download_classified.csv","Download from classifier")
)
),
column(9,
leafletOutput("map", height = 500),
verbatimTextOutput("issue")
)
)
server <- function(input, output, session){}
shinyApp(ui, server)
)
}
map_module <- function(occ.cl){
relibrary(shiny)
library(shinyWidgets)
library(shinydashboard)
library(leaflet)
library(raster)
library(rgdal)
#require(mapview)
#require(mapedit)
require(leaflet.extras)
library(shinyLP)
ui <- fluidPage(
fluidRow(
column(3,
box(width = NULL,
checkboxGroupButtons(
inputId = "grbox", label = "What levels should be downloaded
from grid filter data?",
choices = c("Level 1" = "Level_1",
"Level 2" = "Level_2",
"Level 3" = "Level_3",
"Level 4" = "Level_4",
"Level 5" = "Level_5",
"Level 6" = "Level_6"),
justified = T, status = 'info', size = "xs", direction = "vertical",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
selected = c("Level_1",
"Level_2",
"Level_3",
"Level_4",
"Level_5",
"Level_6"),
width = "100%"
),
materialSwitch("del_mkr_button",
label = "Delete points with click",
status = "danger")
),
box(width = NULL, title = "Download",
solidHeader = T, status = "success",
textOutput("sel_display"),
downloadButton("download_grid_filter.csv","Download from grid filter"),br(),br(),
textOutput("down.class.text"),
downloadButton("download_classified.csv","Download from classifier")
)
),
column(9,
leafletOutput("map", height = 500),
verbatimTextOutput("issue")
)
)
)
server <- function(input, output, session){}
shinyApp(ui, server)
}
map_module(1)
map_module <- function(occ.cl){
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(leaflet)
library(raster)
library(rgdal)
#require(mapview)
#require(mapedit)
require(leaflet.extras)
library(shinyLP)
ui <- fluidPage(
fluidRow(
column(3,
box(width = NULL,
checkboxGroupButtons(
inputId = "grbox", label = "What levels should be downloaded
from grid filter data?",
choices = c("Level 1" = "Level_1",
"Level 2" = "Level_2",
"Level 3" = "Level_3",
"Level 4" = "Level_4",
"Level 5" = "Level_5",
"Level 6" = "Level_6"),
justified = T, status = 'info', size = "xs", direction = "vertical",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
selected = c("Level_1",
"Level_2",
"Level_3",
"Level_4",
"Level_5",
"Level_6"),
width = "100%"
),
materialSwitch("del_mkr_button",
label = "Delete points with click",
status = "danger")
),
box(width = NULL, title = "Download",
solidHeader = T, status = "success",
textOutput("sel_display"),
downloadButton("download_grid_filter.csv","Download from grid filter"),br(),br(),
textOutput("down.class.text"),
downloadButton("download_classified.csv","Download from classifier")
)
),
column(9,
leafletOutput("map", height = 500),
verbatimTextOutput("issue")
)
)
)
server <- function(input, output, session){}
shinyApp(ui, server)
}
map_module(1)
install.packages(shinyWidgets)
install.packages("shinyWidgets")
map_module <- function(occ.cl){
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(leaflet)
library(raster)
library(rgdal)
#require(mapview)
#require(mapedit)
require(leaflet.extras)
library(shinyLP)
ui <- fluidPage(
fluidRow(
column(3,
box(width = NULL,
checkboxGroupButtons(
inputId = "grbox", label = "What levels should be downloaded
from grid filter data?",
choices = c("Level 1" = "Level_1",
"Level 2" = "Level_2",
"Level 3" = "Level_3",
"Level 4" = "Level_4",
"Level 5" = "Level_5",
"Level 6" = "Level_6"),
justified = T, status = 'info', size = "xs", direction = "vertical",
checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon")),
selected = c("Level_1",
"Level_2",
"Level_3",
"Level_4",
"Level_5",
"Level_6"),
width = "100%"
),
materialSwitch("del_mkr_button",
label = "Delete points with click",
status = "danger")
),
box(width = NULL, title = "Download",
solidHeader = T, status = "success",
textOutput("sel_display"),
downloadButton("download_grid_filter.csv","Download from grid filter"),br(),br(),
textOutput("down.class.text"),
downloadButton("download_classified.csv","Download from classifier")
)
),
column(9,
leafletOutput("map", height = 500),
verbatimTextOutput("issue")
)
)
)
server <- function(input, output, session){}
shinyApp(ui, server)
}
map_module(1)
install.packages("shinydashboard")
map_module(1)
install.packages("leaflet")
map_module(1)
install.packages("shinyLP")
map_module(1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
map_module(1)
#require(mapview)
#require(mapedit)
require(leaflet.extras)
install.packages("leaflet.extras")
# função 8
rm.coord.dup <- function(x){
unique.row <- !duplicated(x[,c(latitude,longitude)])
res <- x[unique.row,]
row.names(res) <- 1:nrow(res)
res
}
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
# função 8
rm.coord.dup <- function(x, latitude, longitude){
unique.row <- !duplicated(x[,c(latitude,longitude)])
res <- x[unique.row,]
row.names(res) <- 1:nrow(res)
res
}
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/grid_filter.R')
grep("1", gf.occ.resol$naturaList_levels)
grep("5", gf.occ.resol$naturaList_levels)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
classify_occ(c.occ,
na.rm.coords = T,
crit.levels = c_levels)
occ.rec <- read.csv("../www/Alsophila_setosa.csv", sep = "\t", encoding = "UTF-8")
spec.data <- read.csv("../www/fern_specialists.csv", encoding = "UTF-8")
source("R/classify_occ.R")
source("R/grid_filter.R")
source("R/internal_functions.R")
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
r.occ.rec <- reduce.df(occ.rec, na.rm = TRUE)
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c.occ
c_levels = c("det_by_spec",
"field_obs",
"sci_colection",
"no_criteria_met")
classify_occ(c.occ,
spec.data,
na.rm.coords = T,
crit.levels = c_levels)
table(c.occ$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
gf.occ
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ)
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
gf.occ <- grid_filter(c.occ, r = ras)
points(gf.occ[, c("decimalLongitude", "decimalLatitude")], col = "blue", pch = 16)
table(gf.occ$naturaList_levels)
ras
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ
map_module(c.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module()
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/internal_functions.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
c.occ
map_module(gf.occ.resol)
gf.occ.resol
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
c.occ <- classify_occ(occ.rec, spec.data, na.rm.coords = T)
c_levels = c("det_by_spec",
"field_obs",
"sci_colection",
"no_criteria_met")
classify_occ(c.occ,
spec.data,
na.rm.coords = T,
crit.levels = c_levels)
ras <- raster(resolution = c(5,5),
xmn = -60,
xmx = -30,
ymn = -30,
ymx = -20)
ras <- setValues(ras, rep(1,ncell(ras)))
plot(ras)
points(c.occ[, c("decimalLongitude", "decimalLatitude")], pch = 16)
table(c.occ$naturaList_levels)
gf.occ.resol <- grid_filter(c.occ, grid.resolution = c(2,2))
points(gf.occ.resol[, c("decimalLongitude", "decimalLatitude")], col = "red", pch = 16)
table(gf.occ.resol$naturaList_levels)
gf.occ <- grid_filter(c.occ, r = ras)
points(gf.occ[, c("decimalLongitude", "decimalLatitude")], col = "blue", pch = 16)
table(gf.occ$naturaList_levels)
map_module(gf.occ)
map_module(gf.occ.resol)
str(gf.occ.resol)
str(gf.occ)
map_module(gf.occ.resol)
map_module(gf.occ)
map_module(c.occ)
sapply(c.occ, class)
sapply(c.occ, class) == sapply(gf.occ.resol, class)
sapply(c.occ, class) == sapply(gf.occ, class)
map_module(gf.occ)
map_module(c.occ)
map_module(c.occ)
c.occ$eventDate
as.Date(c.occ$eventDate)
as.Date(gf.occ$eventDate)
as.Date(gf.occ.resol$eventDate)
map_module(gf.occ)
map_module(c.occ)
map_module(gf.occ)
map_module(c.occ)
sapply(c.occ, class) == sapply(gf.occ, class)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(c.occ)
map_module(gf.occ)
map_module(gf.occ.resol)
str(gf.occ)
as.Date(gf.occ.resol$eventDate)
as.Date(c.occ$eventDate)
as.Date(gf.occ$eventDate)
as.Date(gf.occ$decimalLatitude)
(gf.occ$decimalLatitude)
(gf.occ$decimalLongitude)
map_module(gf.occ)
(gf.occ$eventDate)
(gf.occ$eventDate)[6]
(gf.occ$eventDate)
as.character(gf.occ$eventDate)
as.Date(as.character(gf.occ$eventDate))
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
map_module(c.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
as.Date(as.character(gf.occ$dateIdentified))
map_module(c.occ)
as.Date(as.character(c.occ$dateIdentified))
c.occ$dateIdentified
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
map_module(c.occ)
map_module(gf.occ.resol)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
source('C:/Users/Arthur/OneDrive/R/naturaList/naturaList/R/map_module.R', encoding = 'UTF-8')
map_module(gf.occ)
library(devtools)
library(roxygen2)
rm(list = ls())
library(naturaList)
ls()
alsophila_setosa <- read.csv("../www/Alsophila_setosa.csv", sep = "\t", encoding = "UTF-8")
specialists_data <- read.csv("../www/fern_specialists.csv", encoding = "UTF-8")
cl.data <- classify_occ(alsophila_setosa, specialists_data)
y;y;y;y
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data
table(cl.data)
table(cl.data$naturaList_levels)
gr.filter <- grid_filter(cl.data, grid.resolution = c(1.5,1.5) )
table(gr.filter$naturaList_levels)
#check for ouliers in occurence points
a.setosa.occ <- map_module(gr.filter)
a.setosa.occ
a.setosa.occ
table(a.setosa.occ$naturaList_levels)
table(gr.filter$naturaList_levels)
# classification
cl.data <- classify_occ(alsophila_setosa, specialists_data)
cl.data
#check for ouliers in occurence points
a.setosa.occ <- map_module(gr.filter)
a.setosa.occ
dim(alsophila_setosa)
devtools::install_github("avrodrigues/naturaList", force= TRUE)
library(naturaList)
help(package = "naturaList")
devtools::check()
install.packages("sf")
install.packages(c("shiny", "shinyWidgets", "shinyLP"))
devtools::check()
library(shiny)
install.packages("shiny")
install.packages("shinyLP")
install.packages("shinyWidgets")
devtools::check()
install.packages("sf")
devtools::check()
library("naturaList")
